#include <LiquidCrystal.h>
#include <Wire.h>

#define in1 A3
#define in2 10
#define in3 12
#define in4 13
#define enA 3
#define enB 11

const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

const int encoderD0 = A0;
const float wheelDiameter = 6.7;

int pulse = 0;
int previousPos = 0;
float distance = 0.0;

const int MPU_addr = 0x68;
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
int minVal = 265;
int maxVal = 402;
double x, y, z;

float distanceTraveled = 0.0;
unsigned long startTime = 0;

bool postSpinActionInitiated = false;
unsigned long postSpinStartTime = 0;
bool postSpinDistanceMeasured = false;
unsigned long postSpinStopTime = 0;

bool actionCompleted = false; // Add this at the global scope, near your other global variables



bool rampSpeedUsed = false;  // Flag to track if ramp speed has been used

unsigned long rampStartTime = 0;  // Variable to store the start time
bool rampActionCompleted = false; // Flag to ensure the stop and rotate action happens only once

void setup() {
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
  Serial.begin(9600);

  pinMode(encoderD0, INPUT);
  lcd.begin(16, 2);
  lcd.clear();
  pulse = 0;

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

  pinMode(A2, INPUT);
  pinMode(A1, INPUT);

  rampStartTime = millis(); // Initialize ramp start time
  startTime = millis(); // Record the start time
}
double readMPU();
void moveUpRamp();
void Stop();
void rotate360();
void handlePostSpinActions();
bool handleMovement(int rightSensor, int leftSensor);








void loop() {
    unsigned long currentMillis = millis();
    int currentPos = digitalRead(encoderD0);

    if (currentPos != previousPos) {
        pulse++;
        previousPos = currentPos;
    }

    double angleX = readMPU();
    int LEFT_SENSOR = digitalRead(A2);
    int RIGHT_SENSOR = digitalRead(A1);

    // Update distance traveled only when the robot is moving
    if (!(LEFT_SENSOR == 1 && RIGHT_SENSOR == 1)) {
        distanceTraveled = ((pulse * wheelDiameter * PI) / 40.0) - 0.53;
    }

    // Use ramp speed for the first 2.5 seconds after starting
    if (currentMillis - startTime < 2500) {
        moveForwardFast();
    } else {
        // Handle normal movement and rotation logic
        if (currentMillis - rampStartTime >= 1000 && !rampActionCompleted) {
            Stop();
            delay(4000);
            rotate360();
            rampActionCompleted = true; // Indicate the 360-degree spin is done
        }

        // Handle actions after the 360-degree spin
        if (rampActionCompleted && !actionCompleted) {
            handlePostSpinActions();;
        }

        // Update LCD only when the robot is moving
        bool isMoving = handleMovement(RIGHT_SENSOR, LEFT_SENSOR);
        if (isMoving) {
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Angle: ");
            lcd.print(angleX);

            lcd.setCursor(0, 1);
            lcd.print("D: ");
            lcd.print(distanceTraveled);
            lcd.print(" T: ");
            lcd.print((currentMillis - startTime) / 1000);  // Time in seconds
        }
    }
}













double readMPU() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);

  AcX = Wire.read() << 8 | Wire.read();
  AcY = Wire.read() << 8 | Wire.read();
  AcZ = Wire.read() << 8 | Wire.read();

  int xAng = map(AcX, minVal, maxVal, -90, 90);
  int yAng = map(AcY, minVal, maxVal, -90, 90);
  int zAng = map(AcZ, minVal, maxVal, -90, 90);
  x = RAD_TO_DEG * (atan2(-yAng, -zAng) + PI);
  y = RAD_TO_DEG * (atan2(-xAng, -zAng) + PI);
  z = RAD_TO_DEG * (atan2(-yAng, -xAng) + PI);

  return x;
}

void forward() {
  //analogWrite(enA, 73);
  //analogWrite(enB, 73);
  analogWrite(enA, 80);
  analogWrite(enB, 80);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

void moveUpRamp() {
  analogWrite(enA, 230);
  analogWrite(enB, 230);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

void right() {
  analogWrite(enA, 150);
  analogWrite(enB, 80);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

void left() {
  analogWrite(enA, 80); //2 right motors
  analogWrite(enB, 150);  //left
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

void Stop() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}

void rotate360() {
  // Adjust these values to rotate your robot 360 degrees
  //180
  analogWrite(enA, 250); //2 right motors
  analogWrite(enB, 250);  //left
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  delay(1500); // This delay determines how long the rotation lasts. Adjust as necessary.
  // Stop the rotation
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}



void handlePostSpinActions() {
    static bool actionCompleted = false;  // Static flag to remember if action has been completed
    unsigned long currentMillis = millis();

    // Check if actions have already been completed
    if (actionCompleted) {
        return; // Exit if action has already been completed
    }

    // Start the post-spin action after a delay once the spin is completed
    if (!postSpinActionInitiated && rampActionCompleted) {
        postSpinStartTime = currentMillis + 1500; // 1.5 seconds after rotate360
        postSpinActionInitiated = true;
        pulse = 0; // Reset the pulse count for distance measurement
    }

    // Measure distance after returning to ground level
    if (postSpinActionInitiated && currentMillis >= postSpinStartTime && !postSpinDistanceMeasured) {
        float currentDistance = ((pulse * wheelDiameter * PI) / 40.0) - 0.53;
        if (currentDistance >= 120.0) {
            Stop();
            postSpinStopTime = currentMillis;
            postSpinDistanceMeasured = true;
        }
    }

    // Stop for 3 seconds after reaching 120 cm
    if (postSpinDistanceMeasured && currentMillis - postSpinStopTime >= 3000) {
        postSpinActionInitiated = false;
        postSpinDistanceMeasured = false;
        actionCompleted = true; // Mark that the action is completed
    }
}








// Make sure to define the Stop() function if it's not already defined



bool handleMovement(int rightSensor, int leftSensor) {
    if (rightSensor == 0 && leftSensor == 0) {
        forward();
        return true; // Robot is moving
    } else if (rightSensor == 1 && leftSensor == 0) {
        right();
        return true; // Robot is moving
    } else if (rightSensor == 0 && leftSensor == 1) {
        left();
        return true; // Robot is moving
    } else if (rightSensor == 1 && leftSensor == 1) {
        Stop();
        return false; // Robot is stopped
    }
    return false;
}

void moveForwardFast() {
    analogWrite(enA, 200);
    analogWrite(enB, 200);
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}
